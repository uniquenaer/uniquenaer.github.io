(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{251:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("H2Icon"),t._v("  Symbol")],1),t._v(" "),a("p",[a("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/symbol",target:"_blank",rel:"noopener noreferrer"}},[t._v("Symbol - ECMAScript 6入门"),a("OutboundLink")],1)]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),a("p",[t._v("1 Symbol 值作为对象属性名时，不能用点运算符。")]),t._v(" "),a("p",[t._v("2 Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。")]),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),a("p",[t._v("1 Symbol.for")]),t._v(" "),a("p",[t._v('Symbol.for 接受一个字符串作为参数，搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值,如果你调用Symbol.for("cat")30 次，每次都会返回同一个 Symbol 值')]),t._v(" "),a("p",[t._v("2 Symbol.keyFor")]),t._v(" "),a("p",[t._v("返回一个已登记的 Symbol 类型值的key。")]),t._v(" "),t._m(12),t._v(" "),a("RightMenu")],1)},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"symbol是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol是什么？","aria-hidden":"true"}},[this._v("#")]),this._v(" Symbol是什么？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("ES6 新引入的，目的是为解决对象中自定义属性名时易产生冲突的问题，保证每个属性的名字都是独一无二")])]),this._v(" "),s("li",[s("p",[this._v("Symbol通过Symbol函数生成，")])]),this._v(" "),s("li",[s("p",[this._v("Symbol函数前不能用new 来生成，会报错；因为Symbol函数的结果是一个值类型，不是对象")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"symbol-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" Symbol 函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("接受一个字符串作为参数，标识对symbol的描述，如传入的是对象，则会转成字符串。即便传入的描述是一样的，最后的两个symbol也是不相等的。")])]),this._v(" "),s("li",[s("p",[this._v("Symbol 值不能与其他类型的值进行运算，会报错")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("Symbol 不能隐式的转为字符串，可以显式的通过toString的方式转化为字符串")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("Symbol 值也可以转为布尔值，但是不能转为数值")])]),this._v(" "),s("li",[s("p",[this._v("每执行一次Symbol都会生成新的Symbol值，及时每次传入的参数都一样。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v('调用Symbol("cat")30 次，会返回 30 个不同的 Symbol 值。')])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"symbol作为对象属性名使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol作为对象属性名使用","aria-hidden":"true"}},[this._v("#")]),this._v(" Symbol作为对象属性名使用")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" mySymbol "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一种写法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mySymbol"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Hello!'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二种写法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mySymbol"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Hello!'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第三种写法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mySymbol"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Hello!'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 以上写法都得到同样结果")]),t._v("\na"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mySymbol"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "Hello!"')]),t._v("\n\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"属性名的遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性名的遍历","aria-hidden":"true"}},[this._v("#")]),this._v(" 属性名的遍历")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("Symbol 作为属性名，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。")])]),this._v(" "),s("li",[s("p",[this._v("它也不是私有属性，")])]),this._v(" "),s("li",[s("p",[this._v("通过Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。")])]),this._v(" "),s("li",[s("p",[this._v("Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"symbol-for-，symbol-keyfor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-for-，symbol-keyfor","aria-hidden":"true"}},[this._v("#")]),this._v(" Symbol.for()，Symbol.keyFor()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("Symbol.for返回的Symbol会在全局登记，Symbol函数返回的Symbol不会再全局登记")])])}],!1,null,null,null);s.default=e.exports}}]);